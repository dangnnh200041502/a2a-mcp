from fastapi import FastAPI, File, UploadFile, HTTPException
from pydantic_models import QueryInput, QueryResponse, DocumentInfo, DeleteFileRequest
from agents.host_agent.agent import HostAgent
from db_utils import insert_application_logs, get_chat_history, get_all_documents, insert_document_record, delete_document_record
from pinecone_utils import index_document_to_pinecone, delete_doc_from_pinecone
import os
import uuid
import logging
import json
from fastapi import UploadFile, File, HTTPException
import os
import shutil
from contextlib import asynccontextmanager
import asyncio

LOG_PATH = os.path.join(os.path.dirname(__file__), 'app.log')
logging.basicConfig(filename=LOG_PATH, level=logging.INFO)

@asynccontextmanager
async def lifespan(app: FastAPI): 
    # Initialize A2A HostAgent (router)
    app.state.host_agent = HostAgent()
    await app.state.host_agent.create()
    yield
    # Cleanup if needed (HostAgent currently has no external handles to close)

app = FastAPI(lifespan=lifespan)

@app.post("/chat", response_model=QueryResponse)
async def chat_with_agentic_rag(query_input: QueryInput):
    """Chat endpoint routed by HostAgent (A2A router)."""
    session_id = query_input.session_id
    logging.info(f"Session ID: {session_id}, User Query: {query_input.question}")

    # Get chat history if available
    chat_history_existing = get_chat_history(session_id) if session_id else []
    effective_question = query_input.question

    # Do not auto-generate session_id here. If the client provides one,
    # HostAgent/ADK will use it to continue the session. Otherwise the
    # request will be handled without a persisted session id.

    try:
        # Use HostAgent router
        host_agent: HostAgent = app.state.host_agent
        final_text = ""
        effective_session_id = session_id
        async for item in host_agent.invoke(effective_question, session_id):
            # Capture effective session id from stream if provided by HostAgent
            if not effective_session_id:
                stream_sid = item.get("session_id") if isinstance(item, dict) else None
                if stream_sid:
                    effective_session_id = stream_sid
            if item.get("is_task_complete"):
                final_text = item.get("content", "")
                break

        # Save conversation to database
        # Use effective_session_id (may be generated by HostAgent) for logging
        insert_application_logs(effective_session_id, query_input.question, final_text)
        logging.info(f"HostAgent completed - Session: {effective_session_id}, Question: '{query_input.question}'")

        return QueryResponse(
            answer=final_text,
            session_id=effective_session_id
        )
        
    except ValueError as e:
        logging.error(f"Validation error: {e}")
        raise HTTPException(status_code=400, detail=f"Invalid request: {e}")
    except json.JSONDecodeError as e:
        logging.error(f"JSON parsing error: {e}")
        raise HTTPException(status_code=500, detail=f"JSON parsing error: {e}")
    except Exception as e:
        logging.error(f"MCP pipeline error: {e}", exc_info=True)
        raise HTTPException(status_code=500, detail=f"MCP pipeline error: {e}")

    

@app.post("/upload-doc")
def upload_and_index_document(file: UploadFile = File(...)):
    allowed_extensions = ['.pdf', '.docx', '.html']
    file_extension = os.path.splitext(file.filename)[1].lower()
    
    if file_extension not in allowed_extensions:
        raise HTTPException(status_code=400, detail=f"Unsupported file type. Allowed types are: {', '.join(allowed_extensions)}")
    
    temp_file_path = f"temp_{file.filename}"
    
    try:
        # Save the uploaded file to a temporary file
        with open(temp_file_path, "wb") as buffer:
            shutil.copyfileobj(file.file, buffer)
        
        file_id = insert_document_record(file.filename)
        success = index_document_to_pinecone(temp_file_path, file_id)
        
        if success:
            return {"message": f"File {file.filename} has been successfully uploaded and indexed.", "file_id": file_id}
        else:
            delete_document_record(file_id)
            raise HTTPException(status_code=500, detail=f"Failed to index {file.filename}.")
    finally:
        if os.path.exists(temp_file_path):
            os.remove(temp_file_path)

@app.get("/list-docs", response_model=list[DocumentInfo])
def list_documents():
    return get_all_documents()

@app.post("/delete-doc")
def delete_document(request: DeleteFileRequest):
    # Delete from Pinecone
    pinecone_delete_success = delete_doc_from_pinecone(request.file_id)

    if pinecone_delete_success:
        # If successfully deleted from Pinecone, delete from our database
        db_delete_success = delete_document_record(request.file_id)
        if db_delete_success:
            return {"message": f"Successfully deleted document with file_id {request.file_id} from the system."}
        else:
            return {"error": f"Deleted from Pinecone but failed to delete document with file_id {request.file_id} from the database."}
    else:
        return {"error": f"Failed to delete document with file_id {request.file_id} from Pinecone."}

 